import os
import torch
import cv2
import json
import shutil
import numpy as np
import streamlit as st
from PIL import Image
from pathlib import Path
import pytesseract
from datetime import datetime, time,timedelta
import smtplib
from email.mime.text import MIMEText
from PIL import Image, ImageOps

@st.cache()
def load_model(path: str = 'weights/best.pt'):
    model = torch.hub.load('ultralytics/yolov5', 'custom', path = path)
    return model

@st.cache()
def load_model_swap(path: str='weights/best_swap.pt'):
    model = torch.hub.load('ultralytics/yolov5', 'custom', path = path)
    return model

@st.cache()
def load_model_inf(path: str='weights/best_inf.pt'):
    model = torch.hub.load('ultralytics/yolov5', 'custom', path = path)
    return model

@st.cache()
def find_point(xmin, ymin, xmax, ymax):
    x_center = (xmin + xmax) / 2
    y_center = (ymin + ymax) / 2
    data = [{'x': x_center, 'y': y_center}]
    return data

@st.cache()
def load_file_structure(path: str = 'src/all_img.json') -> dict:
    with open(path, 'r') as f:
        return json.load(f)

@st.cache()
def load_list_of_images(
        all_images: dict,
        image_files_dtype: str,
        diseases_species: str
        ) -> list:
    species_dict = all_images.get(image_files_dtype)
    list_of_files = species_dict.get(diseases_species)
    return list_of_files

@st.cache(allow_output_mutation = True)
def get_prediction(img_bytes, model):
    results = model(img_bytes)  
    return results

def read_file(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        return file.read()


def send_email(subject, body, recipients):
    sender = "gia.nguyen2001tp@hcmut.edu.vn"
    password = "xmdcubnbbippoxod"
    msg = MIMEText(body)
    msg['Subject'] = subject
    msg['From'] = sender
    msg['To'] = ', '.join(recipients)
    with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp_server:
        smtp_server.login(sender, password)
        smtp_server.sendmail(sender, recipients, msg.as_string())

def main():
    st.set_page_config(
        page_title = "Automatic Detection of Dermatological diseases",
        page_icon = "üîé",
        layout = "wide",
        initial_sidebar_state = "expanded"
    )

    model = load_model()
    model_swap = load_model_swap()
    model_inf = load_model_inf()
    all_images = load_file_structure()
    types_of_diseases = sorted(list(all_images['train'].keys()))
   
    dtype_file_structure_mapping = {
    'Images Used To Train The Model': 'train',
    'Images Used To Tune The Model': 'valid',
    'Images The Model Has Never Seen': 'test'
}

    data_split_names = list(dtype_file_structure_mapping.keys())


    with st.sidebar:
        st.image(Image.open('src/LOGOMINI.jpg'), width = 100)

        select_page = st.radio("CH·ªåN", ["TRANG CH·ª¶","CHU·∫®N ƒêO√ÅN DA LI·ªÑU", "H·ª¶Y L·ªäCH ƒê√É ƒê·∫∂T","V·ªÄ ADD", "LI√äN H·ªÜ"])
        st.markdown("<br /><br /><br /><br /><br /><br />", unsafe_allow_html = True)
        st.markdown("<hr />", unsafe_allow_html = True)

    if select_page == "CHU·∫®N ƒêO√ÅN DA LI·ªÑU":
        col1, col2 = st.columns([8.1, 4])
        file_img, file_vid, key_path, web_cam = '', '', '',''

        with col2:
            logo = Image.open('src/LOGOBIG.jpg')
            st.image(logo, use_column_width = True)

            with st.expander("C√°ch s·ª≠ d·ª•ng ADD?", expanded = True):
                 with open('src/title/STORY.md', 'r', encoding='utf-8') as file:
                     markdown_text = file.read()

                  # Hi·ªÉn th·ªã n·ªôi dung markdown
            st.markdown(markdown_text, unsafe_allow_html=True)


        with col1:
            with open('src/title/INFO.md', 'r', encoding='utf-8') as file:
                 markdown_text = file.read()

                  # Hi·ªÉn th·ªã n·ªôi dung markdown
            st.markdown(markdown_text, unsafe_allow_html=True)

            choice_way = st.radio("Ch·ªçn m·ªôt", ["T·∫£i ·∫£nh l√™n","T·∫£i video l√™n","S·ª≠ d·ª•ng webcam","Ch·ªçn t·ª´ ·∫£nh c√≥ s·∫µn"])

            if choice_way == "T·∫£i ·∫£nh l√™n":
                file_img = st.file_uploader('T·∫£i m·ªôt h√¨nh ·∫£nh v·ªÅ b·ªánh da li·ªÖu')

                if file_img:
                    img = Image.open(file_img)

            elif choice_way == "T·∫£i video l√™n":
                file_vid = st.file_uploader('T·∫£i m·ªôt video v·ªÅ b·ªánh da li·ªÖu')
                if file_vid:
                    frame_skip = 20 # display every 300 frames
                    st.video(file_vid)
                    vid = file_vid.name
                    with open(vid, mode='wb') as f:
                        f.write(file_vid.read()) # save video to disk
     

            elif choice_way == "S·ª≠ d·ª•ng webcam":
                
                start_button = st.button("B·∫Øt ƒë·∫ßu m·ªü webcam")
                frame_skip = 100
                stframe=st.empty()
                if start_button:
                    web_cam = cv2.VideoCapture(0)
                    vid_cod = cv2.VideoWriter_fourcc(*'mp4v')
                    output = cv2.VideoWriter("cam_video.mp4", vid_cod, 20.0, (640, 480))
                    stop_button = st.button("D·ª´ng webcam")

                    
                    while True:
                        ret, frame = web_cam.read()
                        if not ret:
                            st.warning("Failed to read frame from webcam.")
                            break
                        
                        stframe.image(frame, channels="BGR")
                        output.write(frame)
                        
                        if stop_button:
                            break
                    
                    web_cam.release()
                    output.release()
                    cv2.destroyAllWindows()

                vid='cam_video.mp4'

            else:

                dataset_type = st.selectbox("Lo·∫°i d·ªØ li·ªáu", data_split_names)
                data_folder = dtype_file_structure_mapping[dataset_type]

                selected_species = st.selectbox("Lo·∫°i b·ªánh da li·ªÖu",types_of_diseases)
                available_images = load_list_of_images(all_images, data_folder, selected_species)
                image_name = st.selectbox("T√™n h√¨nh ·∫£nh", available_images)

                key_path = os.path.join('dermatological_diseases_dataset', data_folder, image_name)
                img = cv2.imread(key_path)
                img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                    

            recipe_button = st.button('L·∫•y k·∫øt qu·∫£!')

        st.markdown("<hr />", unsafe_allow_html = True)

        if recipe_button:
            with st.spinner("Ch·ªù trong gi√¢y l√°t..."):
                if file_img or key_path:
                    col3, col4 = st.columns([5, 4])
                    with col3: 
                        if os.path.isdir('./runs'):
                            shutil.rmtree('./runs')

                        results = get_prediction(img, model)
                        results.save()

                        img_res = cv2.imread('./runs/detect/exp/image0.jpg')
                        img_res = cv2.cvtColor(img_res, cv2.COLOR_BGR2RGB)
                        st.header("ƒê√¢y l√† k·∫øt qu·∫£ ph√°t hi·ªán!")
                        st.image(img_res, use_column_width=True)

                        df = results.pandas().xyxy[0]
                        del df['class']
                        st.write(df)
                    with col4:
                        st.header("M√¥ t·∫£")

                        des = set()
                        for name_type in df['name']:
                            if name_type not in des:
                                # X·ª≠ l√Ω hi·ªÉn th·ªã m√¥ t·∫£ cho t·ª´ng lo·∫°i b·ªánh
                                if name_type == 'muncoc':
                                       with st.expander("M·ª§N C√ìC - U M·ªÄM"):

                                            with open('src/title/MUNCOC.md', 'r', encoding='utf-8') as file:
                                                markdown_text = file.read()

                                            # Hi·ªÉn th·ªã n·ªôi dung  markdown
                                            st.markdown(markdown_text, unsafe_allow_html=True)

                                
                                    
                                elif name_type == 'vaynen':
                                    with st.expander("V·∫®Y N·∫æN- √Å S·ª™NG"):

                                        with open('src/title/VAYNEN.md', 'r', encoding='utf-8') as file:
                                            markdown_text = file.read()

                                            # Hi·ªÉn th·ªã n·ªôi dung  markdown
                                        st.markdown(markdown_text, unsafe_allow_html=True)
                                            

                                elif name_type == 'trungcado':
                                    with st.expander("TR·ª®NG C√Å ƒê·ªé"):

                                        with open('src/title/TRUNGCADO.md', 'r', encoding='utf-8') as file:
                                            markdown_text = file.read()

                                            # Hi·ªÉn th·ªã n·ªôi dung  markdown
                                        st.markdown(markdown_text, unsafe_allow_html=True)

                                            

                                elif name_type == 'hacto':
                                    with st.expander("UNG TH∆Ø H·∫ÆC T·ªê"):

                                        with open('src/title/HACTO.md', 'r', encoding='utf-8') as file:
                                            markdown_text = file.read()

                                            # Hi·ªÉn th·ªã n·ªôi dung  markdown
                                        st.markdown(markdown_text, unsafe_allow_html=True)

                                            
                                elif name_type == 'bachbien':
                                    with st.expander("B·∫†CH BI·∫æN"):

                                        with open('src/title/BACHBIEN.md', 'r', encoding='utf-8') as file:
                                            markdown_text = file.read()

                                            # Hi·ªÉn th·ªã n·ªôi dung  markdown
                                        st.markdown(markdown_text, unsafe_allow_html=True)

                                des.add(name_type)

                        if not des:
                            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ m√¥ t·∫£!")

                elif vid:
                    vid_cap = cv2.VideoCapture(vid)
                    cur_frame = 0
                    success = True

                    while success:
                        ret, frame = vid_cap.read()  # get next frame from video
                        if not ret:
                            print("Failed to read frame from video.")
                            break
                        
                        if cur_frame % frame_skip == 0:  # only analyze every n=300 frames
                            print('frame: {}'.format(cur_frame))
                            img = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                            pil_img = Image.fromarray(img)
                            
                            if os.path.exists('./runs'):
                                shutil.rmtree('./runs')
                            
                            results = get_prediction(pil_img, model)
                            results.save()

                            st.header("ƒê√¢y l√† k·∫øt qu·∫£ ph√°t hi·ªán!")

                            img_res = cv2.imread('./runs/detect/exp/image0.jpg')
                            if img_res is not None:
                                img_res = cv2.cvtColor(img_res, cv2.COLOR_BGR2RGB)
                                
                                col5, col6 = st.columns([5, 4])
                                with col5:
                                    st.image(img_res, use_column_width=True)

                                    df = results.pandas().xyxy[0]
                                    del df['class']
                                    st.write(df)
                                with col6:
                                    st.header("M√¥ t·∫£")

                                    des = set()
                                    for name_type in df['name']:
                                        if name_type not in des:
                                            # X·ª≠ l√Ω hi·ªÉn th·ªã m√¥ t·∫£ cho t·ª´ng lo·∫°i b·ªánh
                                            if name_type == 'muncoc':
                                                with st.expander("M·ª§N C√ìC - U M·ªÄM"):

                                                        with open('src/title/MUNCOC.md', 'r', encoding='utf-8') as file:
                                                            markdown_text = file.read()

                                                        # Hi·ªÉn th·ªã n·ªôi dung  markdown
                                                        st.markdown(markdown_text, unsafe_allow_html=True)

                                            
                                                
                                            elif name_type == 'vaynen':
                                                with st.expander("V·∫®Y N·∫æN- √Å S·ª™NG"):

                                                    with open('src/title/VAYNEN.md', 'r', encoding='utf-8') as file:
                                                        markdown_text = file.read()

                                                        # Hi·ªÉn th·ªã n·ªôi dung  markdown
                                                    st.markdown(markdown_text, unsafe_allow_html=True)
                                                        

                                            elif name_type == 'trungcado':
                                                with st.expander("TR·ª®NG C√Å ƒê·ªé"):

                                                    with open('src/title/TRUNGCADO.md', 'r', encoding='utf-8') as file:
                                                        markdown_text = file.read()

                                                        # Hi·ªÉn th·ªã n·ªôi dung  markdown
                                                    st.markdown(markdown_text, unsafe_allow_html=True)

                                                        

                                            elif name_type == 'hacto':
                                                with st.expander("UNG TH∆Ø H·∫ÆC T·ªê"):

                                                    with open('src/title/HACTO.md', 'r', encoding='utf-8') as file:
                                                        markdown_text = file.read()

                                                        # Hi·ªÉn th·ªã n·ªôi dung  markdown
                                                    st.markdown(markdown_text, unsafe_allow_html=True)

                                                        
                                            elif name_type == 'bachbien':
                                                with st.expander("B·∫†CH BI·∫æN"):

                                                    with open('src/title/BACHBIEN.md', 'r', encoding='utf-8') as file:
                                                        markdown_text = file.read()

                                                        # Hi·ªÉn th·ªã n·ªôi dung  markdown
                                                    st.markdown(markdown_text, unsafe_allow_html=True)

                                            des.add(name_type)

                                    if not des:
                                        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ m√¥ t·∫£!")
                        cur_frame += 1
                            
                else:
                    st.error('Kh√¥ng c√≥ d·ªØ li·ªáu. Vui l√≤ng ch·ªçn m·ªôt h√¨nh ·∫£nh ho·∫∑c video v·ªÅ b·ªánh da li·ªÖu!')

    elif select_page == "TRANG CH·ª¶":
            col1, col2 = st.columns([8.1, 4])
            file_img, file_img_bhyt ='',''
            type = ""

            with col2:
                logo = Image.open('src/LOGOBIG.jpg')
                st.image(logo, use_column_width = True)

                with st.expander("C√°ch s·ª≠ d·ª•ng ADD?", expanded = True):
                    with open('src/title/STORY1.md', 'r', encoding='utf-8') as file:
                        markdown_text = file.read()

                    # Hi·ªÉn th·ªã n·ªôi dung markdown
                st.markdown(markdown_text, unsafe_allow_html=True)

            with col1:
                with open('src/title/INFO2.md', 'r', encoding='utf-8') as file:
                    markdown_text = file.read()

                    # Hi·ªÉn th·ªã n·ªôi dung markdown
                st.markdown(markdown_text, unsafe_allow_html=True)

                mail = st.text_input('ƒê·ªÉ ti·ªán cho vi·ªác li√™n h·ªá khi c√≥ b·∫•t k√¨ s·ª± thay ƒë·ªïi n√†o. Vui l√≤ng nh·∫≠p mail')

                st.title("ƒê·∫∑t l·ªãch")

                current_date = datetime.now()

                # T√≠nh to√°n ng√†y gi·ªõi h·∫°n l√† 7 ng√†y k·∫ø ti·∫øp
                max_date = current_date + timedelta(days=7)

                # Hi·ªÉn th·ªã tr√¨nh ƒëi·ªÅu khi·ªÉn ng√†y v·ªõi gi·ªõi h·∫°n
                selected_date = st.date_input("Ch·ªçn ng√†y:", current_date, max_value=max_date)

                choice_way = st.radio("Ch·ªçn l·ªãch kh√°m b·ªánh", ["Bu·ªïi s√°ng","Bu·ªïi chi·ªÅu"])
                if choice_way == "Bu·ªïi s√°ng":
                # Tr√¨nh ƒëi·ªÅu khi·ªÉn th·ªùi gian
                    start_time = time(8, 0)
                    end_time = time(11, 0)
                else: 

                    # Gi·ªõi h·∫°n th·ªùi gian bu·ªïi chi·ªÅu t·ª´ 12 gi·ªù tr∆∞a ƒë·∫øn 17 gi·ªù tr∆∞a
                    start_time = time(13, 0)
                    end_time = time(17, 0)

                # T·∫°o danh s√°ch th·ªùi gian 
                time_range = [start_time.replace(hour=h, minute=0) for h in range(start_time.hour, end_time.hour + 1)]

                # Tr√¨nh ƒëi·ªÅu khi·ªÉn th·ªùi gian d∆∞·ªõi d·∫°ng dropdown cho bu·ªïi s√°ng
                selected_time = st.selectbox("Ch·ªçn gi·ªù :", time_range)

                date_str = selected_date.strftime("%Y-%m-%d")
                hour_str = selected_time.strftime('%H')

                # T·∫°o ƒë∆∞·ªùng d·∫´n t·∫≠p tin
                directory = f'host/booking/{date_str}/{hour_str}'
                file_path = f'{directory}/booking.txt'

            # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
                if os.path.exists(directory):
                    st.warning("T·ªáp tin ƒë√£ t·ªìn t·∫°i. H√£y ch·ªçn m·ªôt th·ªùi gian kh√°c.")
                
                file_img = st.file_uploader('ƒê·ªÉ h·ªó tr·ª£ qu√° tr√¨nh thƒÉm kh√°m b·ªánh. Vui l√≤ng t·∫£i m·ªôt h√¨nh ·∫£nh hi·ªán tr·∫°ng da c·ªßa b·∫°n ƒë·ªÉ ch√∫ng t√¥i ƒë∆∞a ra nh·ªØng chu·∫©n ƒëo√°n ban ƒë·∫ßu')
                if file_img:
                    img = Image.open(file_img) 
                file_img_bhyt = st.file_uploader('Vui l√≤ng cung c·∫•p th√¥ng tin b·ªánh nh√¢n b·∫±ng c√°ch t·∫£i m·ªôt h√¨nh ·∫£nh b·∫£o hi·ªÉm y t·∫ø c·ªßa b·ªánh nh√¢n tr√™n ·ª©ng d·ª•ng VISSID')    
                if file_img_bhyt:
                    img_bhyt = Image.open(file_img_bhyt)
    
                recipe_button = st.button('G·ª≠i th√¥ng tin.')
                if recipe_button:
                    st.markdown("<hr />", unsafe_allow_html = True)
                    with st.spinner("Ch·ªù trong gi√¢y l√°t..."):
                        if mail and file_img and file_img_bhyt and selected_date and selected_time:
                            if file_img:
                                if os.path.isdir('./runs'):
                                    shutil.rmtree('./runs')

                                    results = get_prediction(img, model)
                                    results.save()

                                    img_res = cv2.imread('./runs/detect/exp/image0.jpg')

                                    df = results.pandas().xyxy[0]
                                    name_type=df['name'].item()
                                    des = set()
                                    for name_type in df['name']:
                                        if name_type not in des:
                                            img_res = cv2.cvtColor(img_res, cv2.COLOR_BGR2RGB)
                                            st.image(img_res, use_column_width=True)
                                            
                                                # X·ª≠ l√Ω hi·ªÉn th·ªã m√¥ t·∫£ cho t·ª´ng lo·∫°i b·ªánh
                                            if name_type == 'muncoc':
                                                type='K·∫øt qu·∫£ chu·∫©n ƒëo√°n s∆° b·ªô: M·ª•n c√≥c'
                    
                                            elif name_type == 'vaynen':
                                                type='K·∫øt qu·∫£ chu·∫©n ƒëo√°n s∆° b·ªô: V·∫©y n·∫øn'

                                            elif name_type == 'trungcado':
                                                type='K·∫øt qu·∫£ chu·∫©n ƒëo√°n s∆° b·ªô: Tr·ª©ng c√° ƒë·ªè' 

                                            elif name_type == 'hacto':
                                                type='K·∫øt qu·∫£ chu·∫©n ƒëo√°n s∆° b·ªô: H·∫Øc t·ªë'
                                                            
                                            elif name_type == 'bachbien':
                                                type='K·∫øt qu·∫£ chu·∫©n ƒëo√°n s∆° b·ªô: B·∫°ch bi·∫øn'

                                            des.add(name_type)

                                        if not des:
                                            type='Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ m√¥ t·∫£!'
                                        st.write(type)

                                else:
                                    st.error('Kh√¥ng c√≥ d·ªØ li·ªáu. Vui l√≤ng ch·ªçn m·ªôt h√¨nh ·∫£nh hi·ªán tr·∫°ng tr√™n da')

                                if file_img_bhyt:
                                    if os.path.isdir('./runs'):
                                        shutil.rmtree('./runs')
                                    x_qr, y_qr, x_bhyt, y_bhyt ='','','',''
                                    cropped_img , rotated_image = '',''
                                    results = get_prediction(img_bhyt, model_swap)
                                    results.save()
                                        
                                    img_res = cv2.imread('./runs/detect/exp/image0.jpg')
                                    if img_res is not None:
                                        img_res = cv2.cvtColor(img_res, cv2.COLOR_BGR2RGB)

                                        st.image(img_res, use_column_width=True)

                                        df = results.pandas().xyxy[0]
                                        del df['class']

                                        des = set()
                                        for name_type in df['name']:
                                            if name_type not in des:
                                                if name_type == 'qr':
                                                    id_rows = df[df['name'] == 'qr']
                                                    for index, row in id_rows.iterrows():
                                                        x_min, y_min, x_max, y_max = row['xmin'], row['ymin'], row['xmax'], row['ymax']
                                                        data_qr= find_point(x_min, y_min, x_max, y_max)
                                                        x_qr, y_qr = data_qr[0]['x'], data_qr[0]['y']
                                                    
                                                if name_type == 'bhyt':
                                                    id_rows = df[df['name'] == 'bhyt']
                                                    for index, row in id_rows.iterrows():
                                                        x_min, y_min, x_max, y_max = row['xmin'], row['ymin'], row['xmax'], row['ymax']
                                                        cropped_img = img_bhyt.crop((x_min, y_min, x_max, y_max))
                                                        data_bhyt= find_point(x_min, y_min, x_max, y_max)
                                                        x_bhyt, y_bhyt = data_bhyt[0]['x'], data_bhyt[0]['y']
                                                        st.write(data_bhyt)

                                                st.write(data_qr)
                                                st.write(x_qr)
                                        
                        else:
                            st.warning('Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin.')


    elif select_page == "H·ª¶Y L·ªäCH ƒê√É ƒê·∫∂T":
            col1, col2 = st.columns([8.1, 4])
            with col2:
                logo = Image.open('src/LOGOBIG.jpg')
                st.image(logo, use_column_width = True)

                with st.expander("C√°ch s·ª≠ d·ª•ng ADD?", expanded = True):
                    with open('src/title/STORY2.md', 'r', encoding='utf-8') as file:
                        markdown_text = file.read()

                    # Hi·ªÉn th·ªã n·ªôi dung markdown
                st.markdown(markdown_text, unsafe_allow_html=True)

            with col1:
                with open('src/title/INFO3.md', 'r', encoding='utf-8') as file:
                    markdown_text = file.read()

                    # Hi·ªÉn th·ªã n·ªôi dung markdown
                st.markdown(markdown_text, unsafe_allow_html=True)

                mail = st.text_input('Vui l√≤ng nh·∫≠p mail b·∫°n ƒë√£ ƒëƒÉng k√≠ v·ªõi ch√∫ng t√¥i')
                current_date = datetime.now()

                # T√≠nh to√°n ng√†y gi·ªõi h·∫°n l√† 7 ng√†y k·∫ø ti·∫øp
                max_date = current_date + timedelta(7)

                # Hi·ªÉn th·ªã tr√¨nh ƒëi·ªÅu khi·ªÉn ng√†y v·ªõi gi·ªõi h·∫°n
                selected_date = st.date_input("Ch·ªçn ng√†y:", current_date, max_value=max_date)

                choice_way = st.radio("Ch·ªçn l·ªãch kh√°m b·ªánh", ["Bu·ªïi s√°ng","Bu·ªïi chi·ªÅu"])
                if choice_way == "Bu·ªïi s√°ng":
                # Tr√¨nh ƒëi·ªÅu khi·ªÉn th·ªùi gian
                    start_time = time(8, 0)
                    end_time = time(11, 0)
                else: 

                    # Gi·ªõi h·∫°n th·ªùi gian bu·ªïi chi·ªÅu t·ª´ 12 gi·ªù tr∆∞a ƒë·∫øn 17 gi·ªù tr∆∞a
                    start_time = time(13, 0)
                    end_time = time(17, 0)

                # T·∫°o danh s√°ch th·ªùi gian 
                time_range = [start_time.replace(hour=h, minute=0) for h in range(start_time.hour, end_time.hour + 1)]

                # Tr√¨nh ƒëi·ªÅu khi·ªÉn th·ªùi gian d∆∞·ªõi d·∫°ng dropdown cho bu·ªïi s√°ng
                selected_time = st.selectbox("Ch·ªçn gi·ªù :", time_range)

                date_str = selected_date.strftime("%Y-%m-%d")
                hour_str = selected_time.strftime('%H')

                # T·∫°o ƒë∆∞·ªùng d·∫´n t·∫≠p tin
                directory = f'host/booking/{date_str}/{hour_str}'
                file_path = f'{directory}/booking.txt'
                file_mail = f'{directory}/{mail}.txt'
                recipe_button = st.button('G·ª≠i th√¥ng tin.')
                if recipe_button:
                    st.markdown("<hr />", unsafe_allow_html = True)
                    with st.spinner("Ch·ªù trong gi√¢y l√°t..."):
                        if mail and selected_date and selected_time:
                            if os.path.exists(directory):
                                if os.path.exists(file_mail):
                                    subject = "X√ÅC NH·∫¨N H·ª¶Y L·ªäCH KH√ÅM B·ªÜNH"
                                    body= "B·∫°n h·ªßy l·ªãch kh√°m b·ªánh th√†nh c√¥ng tr√™n website ADD.\n"+read_file(file_path)+"\nVui l√≤ng ki·ªÉm tra th√¥ng tin b√™n tr√™n v√† ph·∫£n h·ªìi v·ªÅ cho ch√∫ng t√¥i qua m·ª•c li√™n h·ªá khi c√≥ b·∫•t c·ª© nh·∫ßm l·∫´n n√†o"
                                    recipients=mail
                                    send_email(subject, body, recipients)
                                    shutil.rmtree(directory)
                                    st.success('Ch√∫ng t√¥i ƒë√£ g·ª≠i th√¥ng tin x√°c nh·∫≠n h·ªßy l·ªãch v·ªÅ mail. Vui l√≤ng ki·ªÉm tra mail!')

                                else: 
                                    st.warning('Vui l√≤ng ki·ªÉm tra l·∫°i s·ªë ƒëi·ªán tho·∫°i ƒë√£ cung c·∫•p. Ch√∫ng t√¥i ch∆∞a t·ª´ng nh·∫≠n l·ªãch ƒëƒÉng k√≠ cho s·ªë ƒëi·ªán tho·∫°i n√†y.')
                            else:
                                st.warning("Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒë√£ cung c·∫•p. Ch√∫ng t√¥i ch∆∞a t·ª´ng nh·∫≠n l·ªãch ƒëƒÉng k√≠ cho kho·∫£ng th·ªùi gian n√†y.")
                        else:
                            st.warning('Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin.')
    elif select_page == "LI√äN H·ªÜ":
        col1, col2 = st.columns([8.1, 4])
        file_img, file_vid, key_path,vip_cap = '', '', '',''

        with col2:
            st.image(Image.open('src/LOGOBIG.jpg'), width = 200)

            with st.expander("ƒê·ªÇ LI√äN H·ªÜ V·ªöI ADD VUI L√íNG ƒêI·ªÄN FORM B√äN TR√ÅI", expanded = True):
                 with open('src/title/LIENHE.md', 'r', encoding='utf-8') as file:
                     markdown_text = file.read()

                  # Hi·ªÉn th·ªã n·ªôi dung markdown
            st.markdown(markdown_text, unsafe_allow_html=True)

        with col1:
            with open('src/title/INFO1.md', 'r', encoding='utf-8') as file:
                 markdown_text = file.read()

                  # Hi·ªÉn th·ªã n·ªôi dung markdown
            st.markdown(markdown_text, unsafe_allow_html=True)

            name = st.text_input('H·ªç v√† t√™n')
            mail = st.text_input('Email')
            tieude = st.text_input('Ti√™u ƒë·ªÅ')
            noidung = st.text_input('N·ªôi dung')

            recipe_button = st.button('G·ª≠i')

            st.markdown("<hr />", unsafe_allow_html = True)

            if recipe_button:
                if name and mail and tieude and noidung:
                    email_content = f"H·ªç v√† t√™n: {name}\nEmail: {mail}\nTi√™u ƒë·ªÅ: {tieude}\nN·ªôi dung: {noidung}"
        
                    # L∆∞u th√¥ng tin v√†o t·ªáp tin trong th∆∞ m·ª•c "mess" v·ªõi m√£ h√≥a utf-8
                    file_path = os.path.join("host/feedback", f"{name}_{mail}.txt")
                    with open(file_path, "w", encoding="utf-8") as f:
                        f.write(email_content)
                    st.success("Ph·∫£n h·ªìi c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!")
                else:
                    st.error('Vui l√≤ng ƒëi·ªÅn ƒë·ªß th√¥ng tin')

    else:
        logo = Image.open('src/GT.jpg')
        st.image(logo, use_column_width = True)
        with open('src/title/GT.md', 'r', encoding='utf-8') as file:
            markdown_text = file.read()

                  # Hi·ªÉn th·ªã n·ªôi dung markdown
        st.markdown(markdown_text, unsafe_allow_html=True)

if __name__ == '__main__':
    main()

